---
import BlockRendererInner from './BlockRenderer.astro';
import Navigation from './Navigation.astro';
import NavigationLink from './NavigationLink.astro';
import NavigationSubmenu from './NavigationSubmenu.astro';
import Cover from './Cover.astro';
import Heading from './Heading.astro';
import Button from './Button.astro';
import TickItem from './TickItem.astro';
import SocialLink from './SocialLink.astro';
import { getBlockStyling } from '@wp-block-tools/styles';
import type { Block } from '@wp-block-tools/styles';
import { Image } from 'astro:assets';
type Props = {
  blocks: Block[];
};
const { blocks } = Astro.props;
---

{
  blocks.map((block) => {
    const { styles, classes } = getBlockStyling(block);
    switch (block.name) {
      case 'core/button':
        return (
          <Button
            classes={classes}
            styles={styles}
            url={block?.attributes?.url}
            content={block?.attributes?.content || ''}
          />
        );
      case 'core/image':
        return (
          <Image
            src={block?.attributes?.url}
            height={block?.attributes?.height}
            width={block?.attributes?.width}
            alt={block?.attributes?.alt}
            class={classes}
            style={styles}
          />
        );
      case 'core/heading':
        return (
          <Heading
            level={block?.attributes?.level || 2}
            content={block?.attributes?.content || ''}
            classes={classes}
            styles={styles}
          />
        );
      case 'core/cover':
        return (
          <Cover
            classes={classes}
            styles={styles}
            url={block?.attributes?.url}
            width={block?.attributes?.width}
            height={block?.attributes?.width}
            dimRatio={block?.attributes?.dimRatio}
            overlayColor={block?.attributes?.overlayColor}
            customOverlayColor={block?.attributes?.customOverlayColor}
            minHeight={block?.attributes?.minHeight}
            minHeightUnit={block?.attributes?.minHeightUnit}
          >
            <BlockRendererInner blocks={block?.innerBlocks || []} />
          </Cover>
        );
      case 'core/navigation-submenu':
        return (
          <NavigationSubmenu
            classes={classes}
            styles={styles}
            label={block?.attributes?.label || ''}
            url={block?.attributes?.url || ''}
          >
            <BlockRendererInner blocks={block?.innerBlocks || []} />
          </NavigationSubmenu>
        );
      case 'core/navigation-link':
        return (
          <NavigationLink
            classes={classes}
            styles={styles}
            label={block?.attributes?.label || ''}
            url={block?.attributes?.url || ''}
          />
        );
      case 'core/navigation':
        return (
          <Navigation classes={classes} styles={styles}>
            <BlockRendererInner blocks={block?.innerBlocks || []} />
          </Navigation>
        );
      case 'core/paragraph':
        return (
          <p
            class={classes}
            style={styles}
            set:html={block?.attributes?.content}
          />
        );
      case 'core/column':
      case 'core/columns':
      case 'core/post-content':
      case 'core/group':
      case 'core/buttons':
      case 'core/social-links':
        return (
          <div class={classes} style={styles}>
            <BlockRendererInner blocks={block?.innerBlocks || []} />
          </div>
        );
      case 'core/template-part':
        return <BlockRendererInner blocks={block?.innerBlocks || []} />;
      case 'core/site-logo':
        return (
          <div class={classes} style={styles}>
            <Image
              width={block?.attributes?.width || '48px'}
              height={block?.attributes?.width || '48px'}
              src={block?.attributes?.url || ''}
              alt={block?.attributes?.alt || 'Site Logo'}
            />
          </div>
        );
      case 'mjc-real-estates/tick-item':
        return (
          <TickItem>
            <BlockRendererInner blocks={block?.innerBlocks || []} />
          </TickItem>
        );
      case 'core/social-link':
        return (
          <SocialLink
            classes={classes}
            styles={styles}
            url={block.attributes?.url}
            service={block.attributes?.service}
          />
        );
      default:
        return null;
    }
  })
}
